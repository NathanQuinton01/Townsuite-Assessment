input weights
input goal

scaleBalance(weights, goal)
    allSolutions = list
    for item in weights
        solution = list
        runningcount = item
        solution add item
        while runningcount < goal
            if (getGreedyPick(runningcount, weights, goal) = 0)
                solution = empty list
                break;
            runningcount + getGreedyPick(runningcount, weights, goal)
            solution add getGreedyPick(runningcount, weights, goal)
        allSolutions add solution

    return minLength(allSolutions)               <---- Output

getGreedyPick(runningcount, weights, goal)
    maxtotalsofar = 0
    maxitem = 0
    for item in weights:
        temp = runningcount + item
        if temp <= goal and > maxsofar
            maxtotalsofar  = temp
            maxitem = item
    return maxitem


This will go through each weight in the list greedily selecting weights by picking the largest available which does not overshoot the goal.
This will not always produce the optimal solution. If the largest item in the set isnt necessarily optimal but would fall under the goal weight this can fail
to find all solutions and thus potentially fail to find the optimal one. E.g 10,30,40 with a goal of 60 gives the optimal [30,30]
but the set 50,70,80,90 with a goal of 200 will produce [70,90].